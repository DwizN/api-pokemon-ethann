openapi: 3.0.0
info:
  title: Pokémon Card API
  version: 1.0.0
  description: API pour recevoir et gérer les cartes Pokémon
servers:
  - url: http://localhost:3000
    description: Serveur local
paths:
  /pokemons-cards:
    get:
      summary: Obtenir la liste des cartes Pokémon
      responses:
        '200':
          description: Liste des cartes Pokémon
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PokemonCard'
  /pokemons-cards/{id}:
    get:
      summary: Obtenir une carte Pokémon
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la carte Pokémon
          schema:
            type: integer
      responses:
        '200':
          description: Carte Pokémon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PokemonCard'
        '404':
          description: Carte Pokémon non trouvée
        '500':
          description: Erreur serveur
  /pokemon-cards:
    post:
      summary: Ajouter une carte Pokémon (requiert un token)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PokemonCard'
      responses:
        '201':
          description: Carte Pokémon ajoutée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PokemonCard'
        '400':
          description: Requête invalide
        '500':
          description: Erreur serveur
  /pokemon-cards/{id}:
    patch:
      summary: Modifier une carte Pokémon (requiert un token)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la carte Pokémon
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PokemonCard'
      responses:
        '200':
          description: Carte Pokémon modifiée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PokemonCard'
        '400':
          description: Requête invalide
        '404':
          description: Carte Pokémon non trouvée
        '500':
          description: Erreur serveur
    delete:
      summary: Supprimer une carte Pokémon (requiert un token)
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la carte Pokémon
          schema:
            type: integer
      responses:
        '204':
          description: Carte Pokémon supprimée
        '404':
          description: Carte Pokémon non trouvée
        '500':
          description: Erreur serveur
  /pokemon-attacks:
    get:
      summary: Obtenir la liste des attaques Pokémon
      responses:
        '200':
          description: Liste des attaques Pokémon
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PokemonAttack'
  /pokemon-attacks/{id}:
    get:
      summary: Obtenir une attaque Pokémon
      parameters:
        - name: id
          in: path
          required: true
          description: ID de l'attaque Pokémon
          schema:
            type: integer
      responses:
        '200':
          description: Attaque Pokémon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PokemonAttack'
        '404':
          description: Attaque Pokémon non trouvée
        '500':
          description: Erreur serveur
  /pokemon-attacks:
    post:
      summary: Ajouter une attaque Pokémon (requiert un token)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PokemonAttack'
      responses:
        '201':
          description: Attaque Pokémon ajoutée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PokemonAttack'
        '400':
          description: Requête invalide
        '500':
          description: Erreur serveur
  /pokemon-attacks/{id}:
    patch:
      summary: Modifier une attaque Pokémon (requiert un token)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de l'attaque Pokémon
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PokemonAttack'
      responses:
        '200':
          description: Attaque Pokémon modifiée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PokemonAttack'
        '400':
          description: Requête invalide
        '404':
          description: Attaque Pokémon non trouvée
        '500':
          description: Erreur serveur
    delete:
      summary: Supprimer une attaque Pokémon (requiert un token)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de l'attaque Pokémon
          schema:
            type: integer
      responses:
        '204':
          description: Attaque Pokémon supprimée
        '404':
          description: Attaque Pokémon non trouvée
        '500':
          description: Erreur serveur
  /decks:
    get:
      summary: Obtenir la liste des decks
      responses:
        '200':
          description: Liste des decks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deck'
  /decks/{id}:
    get:
      summary: Obtenir un deck
      parameters:
        - name: id
          in: path
          required: true
          description: ID du deck
          schema:
            type: integer
      responses:
        '200':
          description: Deck
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
        '404':
          description: Deck non trouvé
        '500':
          description: Erreur serveur
  /decks:
    post:
      summary: Ajouter un deck (requiert un token)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deck'
      responses:
        '201':
          description: Deck ajouté
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
        '400':
          description: Requête invalide
        '500':
          description: Erreur serveur
  /decks/{id}:
    patch:
      summary: Modifier un deck (requiert un token)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID du deck
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deck'
      responses:
        '200':
          description: Deck modifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
        '400':
          description: Requête invalide
        '404':
          description: Deck non trouvé
        '500':
          description: Erreur serveur
    delete:
      summary: Supprimer un deck (requiert un token)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID du deck
          schema:
            type: integer
      responses:
        '204':
          description: Deck supprimé
        '404':
          description: Deck non trouvé
        '500':
          description: Erreur serveur
  /decks/{id}/add-card:
    post:
      summary: Ajouter une carte à un deck (requiert un token)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID du deck
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cardId:
                  type: integer
      responses:
        '201':
          description: Carte ajoutée au deck
        '400':
          description: Requête invalide
        '404':
          description: Deck ou carte non trouvé
        '500':
          description: Erreur serveur
  /decks/{id}/remove-card:
    post:
      summary: Retirer une carte d'un deck (requiert un token)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID du deck
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cardId:
                  type: integer
      responses:
        '204':
          description: Carte retirée du deck
        '400':
          description: Requête invalide
        '404':
          description: Deck ou carte non trouvé
        '500':
          description: Erreur serveur
  /users:
    post:
      summary: Créer un utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Utilisateur créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Requête invalide
        '500':
          description: Erreur serveur
  /users/login:
    post:
      summary: Se connecter/renvoie un token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Requête invalide
        '401':
          description: Connexion échouée
        '500':
          description: Erreur serveur
components:
  schemas:
    Type:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    PokemonAttack:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        damages:
          type: integer
        type_id:
          $ref: '#/components/schemas/Type'
        type_id:
          type: integer
          $ref: '#/components/schemas/Type'
    PokemonCard:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        pokedexId:
          type: integer
        typeIds:
          type: array
          items:
            $ref: '#/components/schemas/Type'
        lifePoints:
          type: integer
        size:
          type: number
          format: float
        weight:
          type: number
          format: float
        imageUrl:
          type: string
        weakness:
          type: Type
          items:
            $ref: '#/components/schemas/Type'
        weaknessid:
          type: integer
          items:
            $ref: '#/components/schemas/Type'
        attack:
          type: array
          items:
            $ref: '#/components/schemas/attack'
    Deck:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        ownerId:
          type: integer
        owner:
          $ref: '#/components/schemas/User'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PokemonCard'
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        password:
          type: string
    Login:
      type: object
      properties:
        token:
          type: string
        message:
          type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT